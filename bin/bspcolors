#!/usr/bin/env bash

## Copyright (C) 2020-2022 Aditya Shakya <adi1090x@gmail.com>
## Everyone is permitted to copy and distribute copies of this file under GNU-GPL3

## A script to get colours from xrdb & deploy it to polybar, alacritty & rofi.

DIR="$HOME/dotfiles"

getcolors () {
	FOREGROUND="$(xrdb -query | grep 'foreground:' | head -n 1 | awk '{print $NF}')"
	BACKGROUND="$(xrdb -query | grep 'background:' | head -n 1 | awk '{print $NF}')"
	CURSOR="$(xrdb -query | grep 'cursorColor:' | head -n 1 | awk '{print $NF}')"
	BLACK="$(xrdb -query | grep 'color0:' | head -n 1 | awk '{print $NF}')"
	RED="$(xrdb -query | grep 'color1:' | head -n 1 | awk '{print $NF}')"
	GREEN="$(xrdb -query | grep 'color2:' | head -n 1 | awk '{print $NF}')"
	YELLOW="$(xrdb -query | grep 'color3:' | head -n 1 | awk '{print $NF}')"
	BLUE="$(xrdb -query | grep 'color4:' | head -n 1 | awk '{print $NF}')"
	MAGENTA="$(xrdb -query | grep 'color5:' | head -n 1 | awk '{print $NF}')"
	CYAN="$(xrdb -query | grep 'color6:' | head -n 1 | awk '{print $NF}')"
	WHITE="$(xrdb -query | grep 'color7:' | head -n 1 | awk '{print $NF}')"
	ALTBLACK="$(xrdb -query | grep 'color8:' | head -n 1 | awk '{print $NF}')"
	ALTRED="$(xrdb -query | grep 'color9:' | head -n 1 | awk '{print $NF}')"
	ALTGREEN="$(xrdb -query | grep 'color10:' | head -n 1 | awk '{print $NF}')"
	ALTYELLOW="$(xrdb -query | grep 'color11:' | head -n 1 | awk '{print $NF}')"
	ALTBLUE="$(xrdb -query | grep 'color12:' | head -n 1 | awk '{print $NF}')"
	ALTMAGENTA="$(xrdb -query | grep 'color13:' | head -n 1 | awk '{print $NF}')"
	ALTCYAN="$(xrdb -query | grep 'color14:' | head -n 1 | awk '{print $NF}')"
	ALTWHITE="$(xrdb -query | grep 'color15:' | head -n 1 | awk '{print $NF}')"
}

bspbar () {
	cat > $DIR/polybar/colors <<- EOF	
	[color]
	FOREGROUND = ${FOREGROUND}
	BACKGROUND = ${BACKGROUND}
	BLACK = ${BLACK}
	RED = ${RED}
	GREEN = ${GREEN}
	YELLOW = ${YELLOW}
	BLUE = ${BLUE}
	MAGENTA = ${MAGENTA}
	CYAN = ${CYAN}
	WHITE = ${WHITE}
	ALTBLACK = ${ALTBLACK}
	ALTRED = ${ALTRED}
	ALTGREEN = ${ALTGREEN}
	ALTYELLOW = ${ALTYELLOW}
	ALTBLUE = ${ALTBLUE}
	ALTMAGENTA = ${ALTMAGENTA}
	ALTCYAN = ${ALTCYAN}
	ALTWHITE = ${ALTWHITE}
	ALPHA = #00000000
	EOF
}

bspterm () {
	cat > "$DIR"/alacritty/colors.yml <<- _EOF_
		## Colors configuration
		colors:
		  # Default colors
		  primary:
		    background: '${BACKGROUND}'
		    foreground: '${FOREGROUND}'
		  # Normal colors
		  normal:
		    black:   '${BLACK}'
		    red:     '${RED}'
		    green:   '${GREEN}'
		    yellow:  '${YELLOW}'
		    blue:    '${BLUE}'
		    magenta: '${MAGENTA}'
		    cyan:    '${CYAN}'
		    white:   '${WHITE}'
		  # Bright colors
		  bright:
		    black:   '${ALTBLACK}'
		    red:     '${ALTRED}'
		    green:   '${ALTGREEN}'
		    yellow:  '${ALTYELLOW}'
		    blue:    '${ALTBLUE}'
		    magenta: '${ALTMAGENTA}'
		    cyan:    '${ALTCYAN}'
		    white:   '${ALTWHITE}'
	_EOF_
}

bsprofi () {
	cat > $DIR/rofi/colors.rasi <<- EOF	
	* {
		separatorcolor: ${BACKGROUND};

		active-background: ${GREEN};
		normal-background: ${BACKGROUND};
		urgent-background: ${RED};
		urgent-foreground: ${FOREGROUND};

		alternate-active-background: ${BACKGROUND};
		alternate-normal-background: ${BACKGROUND};
		alternate-urgent-background: ${BACKGROUND};

		alternate-active-foreground: ${FOREGROUND};
		alternate-normal-foreground: ${FOREGROUND};
		alternate-urgent-background: ${FOREGROUND};

		selected-active-background: ${RED};
		selected-normal-background: ${GREEN};
		selected-urgent-background: ${YELLOW};

		selecred-active-foreground: ${BACKGROUND};
		selected-normal-foreground: ${BACKGROUND};
		selected-urgent-foreground: ${BACKGROUND};

		background: ${BACKGROUND};
		foreground: ${FOREGROUND};
	}
	EOF
}

bspdunst () {
	sed -i '/urgency_low/Q' "$HOME"/.config/dunst/dunstrc
	cat >> "$HOME"/.config/dunst/dunstrc <<- _EOF_
		[urgency_low]
		timeout = 2
		background = "${BACKGROUND}"
		foreground = "${FOREGROUND}"
		frame_color = "${BLUE}"
		[urgency_normal]
		timeout = 5
		background = "${BACKGROUND}"
		foreground = "${FOREGROUND}"
		frame_color = "${BLUE}"
		[urgency_critical]
		timeout = 0
		background = "${BACKGROUND}"
		foreground = "${FOREGROUND}"
		frame_color = "${RED}"
	_EOF_
}

main () {
	getcolors
	#bspbar
	bspterm
	bsprofi
	bspdunst
}

main